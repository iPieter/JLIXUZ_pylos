package rules;

import be.kuleuven.pylos.Move
import be.kuleuven.pylos.game.PylosBoard
import be.kuleuven.pylos.game.PylosGame
import be.kuleuven.pylos.game.PylosLocation
import be.kuleuven.pylos.game.PylosSphere
import be.kuleuven.pylos.game.PylosSquare
import be.kuleuven.pylos.player.student.PylosLine
import java.util.Arrays

global be.kuleuven.pylos.player.student.StudentPlayerRuleEngine player
global be.kuleuven.pylos.player.student.RuleWeights ruleWeights

rule "Remove own 4"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.REMOVE_FIRST )
    square : PylosSquare( getInSquare() == 4 && (getInSquare( player ) == 4 || getInSquare( player.OTHER ) == 0 ) )
then
    //get remaining location in square
    PylosLocation location = Arrays.stream( square.getLocations())
        .filter( l -> !l.hasAbove() )
        .findFirst()
        .get();

    player.addMove( new Move( location, location.getSphere() ), ruleWeights.getWeight(drools.getRule().getName()) );
end

rule "Rather pass than enable four from other"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.REMOVE_SECOND )
    square : PylosSquare( getInSquare() == 4
                && (getInSquare( player ) <= 1
                       || getInSquare( player.OTHER ) == 3
                    ))
then
    //get remaining location in square
    Arrays.stream( square.getLocations())
        .filter( l -> l.isUsed())
        .filter( l -> l.getSphere().PLAYER_COLOR == player.PLAYER_COLOR )
        .forEach( l -> {
               player.addMove( new Move( l, l.getSphere() ), ruleWeights.getWeight(drools.getRule().getName()) );
         } );
end