package rules;

import be.kuleuven.pylos.Move
import be.kuleuven.pylos.game.PylosBoard
import be.kuleuven.pylos.game.PylosGame
import be.kuleuven.pylos.game.PylosLocation
import be.kuleuven.pylos.game.PylosSphere
import be.kuleuven.pylos.game.PylosSquare
import java.util.Arrays
import java.util.Optional

global be.kuleuven.pylos.player.student.StudentPlayerRuleEngine player

rule "First move as white"
salience 0
when
    board : PylosBoard( numberOfSpheresOnBoard == 0 )
    PylosGame( state == state.MOVE )
then
    PylosLocation location = board.getBoardLocation( 1, 1, 0 );
    PylosSphere sphere = board.getSpheres( player )[0];

    player.addMove( new Move( location, sphere ), 1 );
end

rule "First move as black"
salience 0
when
    board : PylosBoard( numberOfSpheresOnBoard == 1 )
    PylosGame( state == state.MOVE )
then
    PylosSphere otherSphere = Arrays.stream( board.getSpheres() )
                            .filter( s -> !s.isReserve() )
                            .filter( s -> s.PLAYER_COLOR != player.PLAYER_COLOR ) //not really needed
                            .findFirst().get();

    PylosLocation location = board.getBoardLocation( otherSphere.getLocation().X == 1 ? 2 : 1, otherSphere.getLocation().Y == 1 ? 2 : 1, 0 );

    PylosSphere sphere = board.getSpheres( player )[0];

    player.addMove( new Move( location, sphere ), 1 );
end

rule "Find squares with 3 spheres from 1 player"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    square : PylosSquare( getInSquare() == 3
                && (getInSquare( player ) == 3
                       || getInSquare( player.OTHER ) == 3
                    ))
then
    //get remaining location in square
    Optional<PylosLocation> location = Arrays.stream( square.getLocations())
        .filter( l -> !l.isUsed() && l.isUsable())
        .findFirst();

    if (location.isPresent()){
        Move move = new Move( location.get(), null );
        player.addMove( move , 180 );
        insert( move );
        System.out.println("insert 180");
    }
end

rule "Find filled squares with 3 spheres from 1 player"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    square : PylosSquare( getInSquare() == 4
                && (getInSquare( player ) <= 1
                       || getInSquare( player.OTHER ) == 3
                    )
                && topLocation.usable)
then
    Move move = new Move( square.getTopLocation(), null );
    player.addMove( move , 80 );
    insert( move );
end

rule "Find filled squares with 2 spheres from 1 player"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    square : PylosSquare( getInSquare() == 4
                && (getInSquare( player ) <= 2
                       || getInSquare( player.OTHER ) == 2
                    )
                && topLocation.usable)
then
    Move move = new Move( square.getTopLocation(), null );
    player.addMove( move , 5 );
    insert( move );
end

/*rule "Find filled squares with 2 spheres from 1 player and block with free sphere"
salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    square : PylosSquare( getInSquare() == 4
                && (getInSquare( player ) <= 2
                       || getInSquare( player.OTHER ) == 2
                    )
                && topLocation.usable);
    s2 : PylosSquare( getInSquare() <= 3
                && (getInSquare( player ) == 1
                        || getInSquare( player.OTHER ) <= 2
                    ));
then
    //get remaining location in square
    Optional<PylosSphere> sphere = Arrays.stream( square.getLocations())
        .filter( l -> !l.isUsed() && l.isUsable())
        .map( l -> l.getSphere() )
        .findFirst();

    sphere.ifPresent(pylosLocation->player.addMove( new Move( square.getTopLocation(), sphere.get() ), 4 ));

end*/