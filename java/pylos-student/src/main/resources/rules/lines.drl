package rules;

import be.kuleuven.pylos.Move
import be.kuleuven.pylos.game.PylosBoard
import be.kuleuven.pylos.game.PylosGame
import be.kuleuven.pylos.game.PylosLocation
import be.kuleuven.pylos.game.PylosSphere
import be.kuleuven.pylos.player.student.PylosLine
import be.kuleuven.pylos.player.student.PylosNeighbour
import java.util.Arrays
import java.util.Optional
import be.kuleuven.pylos.player.student.StudentPlayerRuleEngine

global be.kuleuven.pylos.player.student.StudentPlayerRuleEngine player
global be.kuleuven.pylos.player.student.RuleWeights ruleWeights

rule "start own line"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    line : PylosLine( isFilledLine() == false && getInLineOwn() == 1 && getInLineOther() == 0)
then
    //get remaining location in square
    Optional<PylosLocation> location = line.getLocations().stream()
        .filter( l -> !l.isUsed() && l.isUsable())
        .findFirst();

    location.ifPresent(pylosLocation-> {

        Move move = new Move( location.get(), null );
        player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
        insert( move );
    });
end

rule "Block other line"
    salience 0
when
    board : PylosBoard()
     PylosGame( state == state.MOVE )
     line : PylosLine( isFilledLine() == false && getInLineOther() == 2 )
then
    //get remaining location in square
    Optional<PylosLocation> location = line.getLocations().stream()
        .filter( l -> !l.isUsed() && l.isUsable())
        .findFirst();

    location.ifPresent(pylosLocation-> {

        Move move = new Move( location.get(), null );
        player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
        insert( move );
    });end

rule "Create line stub"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    line : PylosLine( isFilledLine() == false && getInLineOwn() == 1 )
then
    //get remaining location in square
    Optional<PylosLocation> location = line.getLocations().stream()
        .filter( l -> !l.isUsed() && l.isUsable())
        .findFirst();

    location.ifPresent(pylosLocation-> {

        Move move = new Move( location.get(), null );
        player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
        insert( move );
    });end

rule "Create own line"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    line : PylosLine( isFilledLine() == false && getInLineOwn() == 2 )
then
    //get remaining location in square
    Optional<PylosLocation> location = line.getLocations().stream()
        .filter( l -> !l.isUsed() && l.isUsable())
        .findFirst();

    location.ifPresent(pylosLocation-> {

        Move move = new Move( location.get(), null );
        player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
        insert( move );
    });
end

rule "Create T from line"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    l1 : PylosLine( getInLineOwn() == 3 )
    l2 : PylosLine( isFilledLine() == false && isEmptyMiddle() == true && getInLineOther() == 0 )
    p : PylosNeighbour( (line1 == l1 && line2 == l2) || (line1 == l2 && line2 == l1) )
then
    Move move = new Move( l2.getMiddle(), null );
    player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
    insert( move );
end

rule "Create T from V"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    l1 : PylosLine( getInLineOwn() == 2  && isEmptyMiddle() == true )
    l2 : PylosLine( isFilledLine() ==  false && isEmptyMiddle() == false && getInLineOther() == 0 )
    p : PylosNeighbour( (line1 == l1 && line2 == l2) || (line1 == l2 && line2 == l1) )
then
    Move move = new Move( l1.getMiddle(), null );
    player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
    insert( move );
end

rule "block other T"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    l1 : PylosLine( getInLineOther() == 3 )
    l2 : PylosLine( isFilledLine() == false && isEmptyMiddle() == true && getInLineOwn() == 0 )
    p : PylosNeighbour( (line1 == l1 && line2 == l2) || (line1 == l2 && line2 == l1) )
then
    Move move = new Move( l2.getMiddle(), null );
    player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
    insert( move );
end

rule "Block other V"
    salience 0
when
    board : PylosBoard()
    PylosGame( state == state.MOVE )
    l1 : PylosLine( getInLineOther() == 2  && isEmptyMiddle() == true )
    l2 : PylosLine( isFilledLine() ==  false && isEmptyMiddle() == false && getInLineOwn() == 0 )
    p : PylosNeighbour( (line1 == l1 && line2 == l2) || (line1 == l2 && line2 == l1) )
then
    Move move = new Move( l2.getMiddle(), null );
    player.addMove( move , ruleWeights.getWeight(drools.getRule().getName()) );
    insert( move );
end